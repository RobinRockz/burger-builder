{"version":3,"sources":["components/UI/Input/Input.js","shared/validation.js","containers/Checkout/ContactData/ContactData.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","input","props","inputElement","inputClasses","invalid","touched","push","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","checkValidation","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","ContactData","state","orderForm","name","type","placeholder","validation","valid","email","number","street","country","postalCode","paymentType","loading","formIsValid","orderHandler","event","preventDefault","formData","_this","setState","order","ingredients","price","totalPrice","orderData","userId","onOrderBurger","token","inputChangedHandler","updatedForm","objectSpread","updatedFormElement","target","inputItem","_this2","this","formElementsArray","id","config","form","react_default","onSubmit","formElement","Input","Button","btnType","disabled","Spinner","Component","connect","burgerBuilder","auth","dispatch","actions","withErrorHandler","axios","checkoutSummary","style","width","margin","Burger","clicked","checkoutCancelled","checkoutContinued","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchased","CheckoutSummary_CheckoutSummary","Route","path","match","component"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAA,KA+DeG,IA3DD,SAACC,GAEX,IAAIC,EAAe,KAEbC,EAAe,CAAC,gBAMtB,OAJGF,EAAMG,SAAWH,EAAMI,SACtBF,EAAaG,KAAK,WAGfL,EAAMM,aACT,IAAM,QACFL,EAAeJ,EAAAU,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACPC,UAAWT,EAAaU,KAAK,MACzBZ,EAAMa,cAFH,CAGPC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WACxB,MACJ,IAAM,WACFf,EAAeJ,EAAAU,EAAAC,cAAA,WAAAC,OAAAC,OAAA,CACXC,UAAWT,EAAaU,KAAK,MACzBZ,EAAMa,cAFC,CAGXC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WACpB,MACJ,IAAM,SACFf,EACIJ,EAAAU,EAAAC,cAAA,UACIG,UAAWT,EAAaU,KAAK,KAC7BE,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,SAEfhB,EAAMa,cAAcI,QAAQC,IAAI,SAAAC,GAAM,OACnCtB,EAAAU,EAAAC,cAAA,UACIY,IAAKD,EAAOL,MACZA,MAAOK,EAAOL,OACfK,EAAOE,iBAKtB,MACJ,QACIpB,EACIJ,EAAAU,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CAAOC,UAAWT,EAAaU,KAAK,MAChCZ,EAAMa,cADV,CAEAC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WAI5B,OACInB,EAAAU,EAAAC,cAAA,OAAKG,UAAU,SACXd,EAAAU,EAAAC,cAAA,SAAOG,UAAU,SAASX,EAAMsB,OAC/BrB,4DC1BEsB,IA/BS,SAACT,EAAOU,GAC5B,IAAIC,GAAU,EACd,IAAMD,EACF,OAAO,EAGNA,EAAME,WACPD,EAA2B,KAAjBX,EAAMa,QAAiBF,GAGhCD,EAAMI,YACPH,EAAUX,EAAMe,QAAUL,EAAMI,WAAaH,GAG5CD,EAAMM,YACPL,EAAUX,EAAMe,QAAUL,EAAMM,WAAaL,GAG5CD,EAAMO,UAEPN,EADgB,0IACEO,KAAMlB,IAAWW,GAGlCD,EAAMS,YAEPR,EADgB,QACEO,KAAMlB,IAAWW,GAGvC,OAAOA,kPCjBLS,6MAEFC,MAAQ,CACJC,UAAW,CACPC,KAAM,CACF/B,YAAa,QACbO,cAAe,CACXyB,KAAM,OACNC,YAAa,aAEjBzB,MAAO,GACP0B,WAAY,CACRd,UAAU,GAEde,OAAO,EACPrC,SAAS,GAEbsC,MAAO,CACHpC,YAAa,QACbO,cAAe,CACXyB,KAAM,QACNC,YAAa,cAEjBzB,MAAO,GACP0B,WAAY,CACRd,UAAU,GAEde,OAAO,EACPrC,SAAS,GAEbuC,OAAQ,CACJrC,YAAa,QACbO,cAAe,CACXyB,KAAM,SACNC,YAAa,eAEjBzB,MAAO,GACP0B,WAAY,CACRd,UAAU,EACVE,UAAW,GACXE,UAAW,IAEfW,OAAO,EACPrC,SAAS,GAEbwC,OAAQ,CACJtC,YAAa,QACbO,cAAe,CACXyB,KAAM,OACNC,YAAa,WAEjBzB,MAAO,GACP0B,WAAY,CACRd,UAAU,GAEde,OAAO,EACPrC,SAAS,GAEbyC,QAAS,CACLvC,YAAa,QACbO,cAAe,CACXyB,KAAM,OACNC,YAAa,WAEjBzB,MAAO,GACP0B,WAAY,CACRd,UAAU,GAEde,OAAO,EACPrC,SAAS,GAEb0C,WAAY,CACRxC,YAAa,QACbO,cAAe,CACXyB,KAAM,OACNC,YAAa,eAEjBzB,MAAO,GACP0B,WAAY,CACRd,UAAU,EACVE,UAAW,EACXE,UAAW,GAEfW,OAAO,EACPrC,SAAS,GAEb2C,YAAa,CACTzC,YAAa,SACbO,cAAe,CACXI,QAAS,CACL,CAAEH,MAAO,oBAAqBO,aAAc,qBAC5C,CAAEP,MAAO,aAAcO,aAAc,eACrC,CAAEP,MAAO,MAAOO,aAAc,sBAGtCP,MAAO,MACP0B,WAAY,CACRd,UAAU,GAEde,OAAO,EACPrC,SAAS,IAIjB4C,SAAS,EACTC,aAAa,KAGjBC,aAAe,SAACC,GAEZA,EAAMC,iBAEN,IAAMC,EAAW,GAEjB,IAAI,IAAIjC,KAAOkC,EAAKnB,MAAMC,UACtBiB,EAASjC,GAAOkC,EAAKnB,MAAMC,UAAUhB,GAAKN,MAK9CwC,EAAKC,SAAS,CAACP,SAAS,IAExB,IAAMQ,EAAQ,CACVC,YAAaH,EAAKtD,MAAMyD,YACxBC,MAAOJ,EAAKtD,MAAM2D,WAClBC,UAAWP,EACXQ,OAAQP,EAAKtD,MAAM6D,QAGxBP,EAAKtD,MAAM8D,cAAcN,EAAOF,EAAKtD,MAAM+D,UAI9CC,oBAAsB,SAACb,EAAOlD,GAE1B,IAAMgE,EAAWxD,OAAAyD,EAAA,EAAAzD,CAAA,GACV6C,EAAKnB,MAAMC,WAGZ+B,EAAkB1D,OAAAyD,EAAA,EAAAzD,CAAA,GACjBwD,EAAYhE,IAEnBkE,EAAmBrD,MAAQqC,EAAMiB,OAAOtD,MACxCqD,EAAmB/D,SAAU,EAC7B+D,EAAmB1B,MAAQlB,YAAgB4C,EAAmBrD,MAAOqD,EAAmB3B,YACxFyB,EAAYhE,GAAZQ,OAAAyD,EAAA,EAAAzD,CAAA,GACO0D,GAGP,IAAIlB,GAAc,EAClB,IAAI,IAAIoB,KAAaJ,EACjBhB,EAAcgB,EAAYI,GAAW5B,OAASQ,EAElDK,EAAKC,SAAS,CACVnB,UAAW6B,EACXhB,YAAaA,6EAKZ,IAAAqB,EAAAC,KAECC,EAAoB,GAE1B,IAAI,IAAIpD,KAAOmD,KAAKpC,MAAMC,UACtBoC,EAAkBnE,KAAK,CACnBoE,GAAIrD,EACJsD,OAAQH,KAAKpC,MAAMC,UAAUhB,KAKrC,IAAIuD,EACIC,EAAArE,EAAAC,cAAA,QAAMqE,SAAUN,KAAKrB,cAChBsB,EAAkBtD,IAAI,SAAA4D,GAAW,OAC9BF,EAAArE,EAAAC,cAACuE,EAAA,EAAD,CACI3D,IAAK0D,EAAYL,GACjBnE,YAAawE,EAAYJ,OAAOpE,YAChCO,cAAeiE,EAAYJ,OAAO7D,cAClCC,MAAOgE,EAAYJ,OAAO5D,MAC1BX,SAAU2E,EAAYJ,OAAOjC,MAC7BrC,QAAS0E,EAAYJ,OAAOtE,QAC5BY,QAAS,SAACmC,GAAD,OAAWmB,EAAKN,oBAAoBb,EAAO2B,EAAYL,SAExEG,EAAArE,EAAAC,cAACwE,EAAA,EAAD,CAAQC,QAAQ,UAAUC,UAAWX,KAAKpC,MAAMc,aAAhD,UAQZ,OAJGsB,KAAKvE,MAAMgD,UACV2B,EAAOC,EAAArE,EAAAC,cAAC2E,EAAA,EAAD,OAIPP,EAAArE,EAAAC,cAAA,OAAKG,UAAU,eACXiE,EAAArE,EAAAC,cAAA,qCACCmE,UAnMSS,aAyNXC,cAjBS,SAAAlD,GACpB,MAAO,CACHsB,YAAatB,EAAMmD,cAAc7B,YACjCE,WAAYxB,EAAMmD,cAAc3B,WAChCX,QAASb,EAAMqB,MAAMR,QACrBe,MAAO5B,EAAMoD,KAAKxB,MAClBF,OAAQ1B,EAAMoD,KAAK1B,SAIA,SAAA2B,GACvB,MAAO,CACH1B,cAAe,SAACF,EAAWG,GAAZ,OAAsByB,EAASC,IAAuB7B,EAAWG,OAKzEsB,CAA6CK,YAAiBxD,EAAayD,cC7M3EC,UAnBS,SAAC5F,GACrB,OAEI4E,EAAArE,EAAAC,cAAA,OAAKG,UAAU,mBACXiE,EAAArE,EAAAC,cAAA,sCACAoE,EAAArE,EAAAC,cAAA,OAAKqF,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChCnB,EAAArE,EAAAC,cAACwF,EAAA,EAAD,CAAQvC,YAAazD,EAAMyD,eAE/BmB,EAAArE,EAAAC,cAACwE,EAAA,EAAD,CACIC,QAAQ,SACRgB,QAASjG,EAAMkG,mBAFnB,UAGAtB,EAAArE,EAAAC,cAACwE,EAAA,EAAD,CACAC,QAAQ,UACRgB,QAASjG,EAAMmG,mBAFf,eCTNC,6MAEFC,yBAA2B,WACvB/C,EAAKtD,MAAMsG,QAAQC,YAGvBC,yBAA2B,WACvBlD,EAAKtD,MAAMsG,QAAQG,QAAQ,kGAI3B,IAAIC,EAAU9B,EAAArE,EAAAC,cAACmG,EAAA,EAAD,CAAUC,GAAG,KAoB1B,OAjBErC,KAAKvE,MAAMyD,cACNc,KAAKvE,MAAM6G,YACXH,EACI9B,EAAArE,EAAAC,cAAA,WACIoE,EAAArE,EAAAC,cAACsG,EAAD,CACArD,YAAac,KAAKvE,MAAMyD,YACxByC,kBAAmB3B,KAAK8B,yBACxBF,kBAAmB5B,KAAKiC,2BAExB5B,EAAArE,EAAAC,cAACuG,EAAA,EAAD,CACAC,KAAMzC,KAAKvE,MAAMiH,MAAMD,KAAO,gBAC9BE,UAAWhF,OAMnBwE,SA/BOtB,aA0CRC,sBAPS,SAAAlD,GACpB,MAAO,CACHsB,YAAatB,EAAMmD,cAAc7B,YACjCoD,UAAW1E,EAAMqB,MAAMqD,YAIhBxB,CAAyBe","file":"static/js/3.8d385f55.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Input.css'\n\nconst input = (props) => {\n\n    let inputElement = null;\n\n    const inputClasses = ['InputElement'];\n\n    if(props.invalid && props.touched) {\n        inputClasses.push('Invalid');\n    }\n\n    switch(props.elementType) {\n        case ('input'):\n            inputElement = <input \n                    className={inputClasses.join(' ')}\n                    {...props.elementConfig} \n                    value={props.value}\n                    onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = (\n                <select \n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed} >\n \n                    {props.elementConfig.options.map(option => (\n                        <option \n                            key={option.value} \n                            value={option.value}>\n                          {option.displayValue}\n                        </option>\n                    ))}\n\n                </select>);\n            break;\n        default:\n            inputElement = \n                <input className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />; \n    }\n\n\n    return (\n        <div className='Input'>\n            <label className='Label'>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n}\n\nexport default input;","\nconst checkValidation = (value, rules ) => {\n    let isValid = true;\n    if ( !rules ) {\n        return true;\n    }\n\n    if ( rules.required ) {\n        isValid = value.trim() !== '' && isValid;\n    }\n\n    if ( rules.minLength ) {\n        isValid = value.length >= rules.minLength && isValid\n    }\n\n    if ( rules.maxLength ) {\n        isValid = value.length <= rules.maxLength && isValid\n    }\n\n    if ( rules.isEmail ) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test( value ) && isValid\n    }\n\n    if ( rules.isNumeric ) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test( value ) && isValid\n    }\n\n    return isValid;\n}\n\nexport default checkValidation;","import React, { Component} from'react';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport './ContactData.css';\n\nimport { connect } from 'react-redux';\nimport axios from '../../../axios-orders';\nimport * as actions from '../../../store/actions/index';\nimport checkValidation from '../../../shared/validation';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\n\nclass ContactData extends Component {\n\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            number: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'number',\n                    placeholder: 'Your Number'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 10,\n                    maxLength: 10\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Address'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            postalCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Postal Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                    maxLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n            paymentType: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'creditOrDebitCard', displayValue: 'Credit/Debit Card' },\n                        { value: 'netBanking', displayValue: 'Net Banking' },\n                        { value: 'cod', displayValue: 'Cash on Delivery' },\n                    ],\n                },\n                value: 'cod',\n                validation: {\n                    required: false\n                },\n                valid: true,\n                touched: false\n            }\n        },\n\n        loading: false,\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        \n        event.preventDefault();\n        \n        const formData = {};\n        \n        for(let key in this.state.orderForm) {\n            formData[key] = this.state.orderForm[key].value;\n        }\n\n        // console.log(formData);\n        \n        this.setState({loading: true});\n\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.totalPrice,\n            orderData: formData,\n            userId: this.props.userId\n        };\n\n       this.props.onOrderBurger(order, this.props.token);\n        \n    }\n\n    inputChangedHandler = (event, inputElement) => {\n        \n        const updatedForm = {\n            ...this.state.orderForm\n        };\n\n        const updatedFormElement = {\n            ...updatedForm[inputElement]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.touched = true;\n        updatedFormElement.valid = checkValidation(updatedFormElement.value, updatedFormElement.validation);\n        updatedForm[inputElement] = {\n            ...updatedFormElement\n        };\n\n        let formIsValid = true;\n        for(let inputItem in updatedForm) {\n            formIsValid = updatedForm[inputItem].valid && formIsValid;\n        }\n        this.setState({\n            orderForm: updatedForm,\n            formIsValid: formIsValid   \n        });\n    }\n\n\n    render() {\n\n        const formElementsArray = [];\n\n        for(let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n\n            });\n        }\n\n        let form = (\n                <form onSubmit={this.orderHandler}>\n                    {formElementsArray.map(formElement => (\n                        <Input \n                            key={formElement.id}\n                            elementType={formElement.config.elementType} \n                            elementConfig={formElement.config.elementConfig} \n                            value={formElement.config.value}\n                            invalid={!formElement.config.valid}\n                            touched={formElement.config.touched}\n                            changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n                    ))}\n                    <Button btnType='Success' disabled={!this.state.formIsValid}>Order</Button>\n                </form>\n        );\n\n        if(this.props.loading) {\n            form = <Spinner />;\n        }\n\n        return (\n            <div className='ContactData'>\n                <h4>Enter your contact data</h4>\n                {form}\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        totalPrice: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n    return (\n\n        <div className='CheckoutSummary'>\n            <h1>We hope it tastes well!!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button \n                btnType='Danger'\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button \n            btnType='Success'\n            clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom'; \nimport { connect } from 'react-redux';\n\nimport ContactData from '../Checkout/ContactData/ContactData';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=''/>;\n\n\n        if(this.props.ingredients) {\n            if(!this.props.purchased) {\n                summary =  (\n                    <div>\n                        <CheckoutSummary \n                        ingredients={this.props.ingredients}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler} />\n                        \n                        <Route \n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                    </div>\n                );\n            }\n        }\n\n         return summary;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n};\n\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}