{"version":3,"sources":["components/UI/Input/Input.js","shared/validation.js","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","input","props","inputElement","inputClasses","invalid","touched","push","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","checkValidation","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","Auth","state","controls","email","type","placeholder","validation","valid","password","isSignup","inputChangedHandler","event","controlName","updatedControls","_home_aximsoft_Documents_robin_reactjsTutorial_projects_git_burger_builder_burger_builder_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_this","_home_aximsoft_Documents_robin_reactjsTutorial_projects_git_burger_builder_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","building","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_7___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_8__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_14__","errorMessage","error","message","btnLabel","helpBtnLabel","redirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_12__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_9__","btnType","clicked","Component","connect","auth","token","burgerBuilder","dispatch","actions"],"mappings":"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","file":"static/js/4.77c3f78c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Input.css'\n\nconst input = (props) => {\n\n    let inputElement = null;\n\n    const inputClasses = ['InputElement'];\n\n    if(props.invalid && props.touched) {\n        inputClasses.push('Invalid');\n    }\n\n    switch(props.elementType) {\n        case ('input'):\n            inputElement = <input \n                    className={inputClasses.join(' ')}\n                    {...props.elementConfig} \n                    value={props.value}\n                    onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = (\n                <select \n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed} >\n \n                    {props.elementConfig.options.map(option => (\n                        <option \n                            key={option.value} \n                            value={option.value}>\n                          {option.displayValue}\n                        </option>\n                    ))}\n\n                </select>);\n            break;\n        default:\n            inputElement = \n                <input className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />; \n    }\n\n\n    return (\n        <div className='Input'>\n            <label className='Label'>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n}\n\nexport default input;","\nconst checkValidation = (value, rules ) => {\n    let isValid = true;\n    if ( !rules ) {\n        return true;\n    }\n\n    if ( rules.required ) {\n        isValid = value.trim() !== '' && isValid;\n    }\n\n    if ( rules.minLength ) {\n        isValid = value.length >= rules.minLength && isValid\n    }\n\n    if ( rules.maxLength ) {\n        isValid = value.length <= rules.maxLength && isValid\n    }\n\n    if ( rules.isEmail ) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test( value ) && isValid\n    }\n\n    if ( rules.isNumeric ) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test( value ) && isValid\n    }\n\n    return isValid;\n}\n\nexport default checkValidation;","import React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport checkValidation from '../../shared/validation';\n\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport './Auth.css';\n\n\nclass Auth extends Component {\n    \n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Enter Mail id'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if(!this.props.building && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    \n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: checkValidation(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        }\n\n        this.setState({\n            controls: updatedControls\n        });\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(\n            this.state.controls.email.value, \n            this.state.controls.password.value,\n            this.state.isSignup);\n        \n    }\n\n    switchAuthModeHandler = () => {\n        this.setState((prevState) =>({\n            isSignup: !prevState.isSignup\n        }));\n    }\n    \n    render() {\n\n        const formElementsArray = [];\n        for(let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n\n            });\n        }\n\n        let form = formElementsArray.map((formElement) => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType} \n                elementConfig={formElement.config.elementConfig} \n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n        ));\n\n        if(this.props.loading)\n            form = <Spinner />;\n\n        let errorMessage = null;\n\n        if(this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        }\n\n        let btnLabel = 'Login';\n        let helpBtnLabel = 'New user? .. click here';\n\n        if(!this.state.isSignup) {\n            btnLabel = 'Signup'\n            helpBtnLabel = 'Already a user?.. click here';\n        }\n\n        let redirect = null;\n        \n        if(this.props.isAuthenticated) {\n            redirect = <Redirect to={this.props.authRedirectPath} />;\n        }\n\n\n        return(\n            <div className='Auth'>\n                {redirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType='Success'>{btnLabel}</Button>\n                </form>\n                <Button \n                    btnType='Danger'\n                    clicked={this.switchAuthModeHandler}>\n                        {helpBtnLabel}\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token != null,\n        building: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password) => dispatch(actions.auth(email, password)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}